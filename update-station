#!/usr/local/bin/python

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib, GObject
import threading
import sys
import socket
from time import sleep
from subprocess import Popen
ustationfile = '/usr/local/lib/update-station/'
sys.path.append(ustationfile)
from updateHandler import fetchpkgupdate, installpkgupdate, checkforupdate, runcheckupdate, pkgupdatelist

updateToInstall = []
lockPkg = []

insingal = True
threadBreak = False
uwinstatue = True
iconStopRefrech = False


class UpdateWindow:

    def hidewindow(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.hide()
            global iconStopRefrech
            iconStopRefrech = False

    def delete_event(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            # don't delete; hide instead
            self.window.hide_on_delete()
            global iconStopRefrech
            iconStopRefrech = False

    def startupdate(self, widget):
        if len(lockPkg) != 0:
            pass
        if len(updateToInstall) != 0:
            if self.insingal is True:
                InstallUpdate(updateToInstall)
                self.insingal = False
                self.window.hide()

    def create_bbox(self):
        table = Gtk.Table(n_rows=1, n_columns=5, homogeneous=True)
        button = Gtk.Button(label="Install update")
        table.attach(button, 0, 1, 0, 1)
        button.connect("clicked", self.startupdate)
        # button = Gtk.Button(stock=Gtk.STOCK_CLOSE)
        img = Gtk.Image(icon_name='window-close')
        button = Gtk.Button(label="Close")
        button.set_image(img)
        table.attach(button, 4, 5, 0, 1)
        button.connect("clicked", self.hidewindow)
        return table

    def __init__(self):
        self.insingal = True
        # window
        self.window = Gtk.Window()
        self.window.connect("destroy", self.delete_event)
        self.window.set_size_request(600, 400)
        self.window.set_resizable(False)
        self.window.set_title("Update Manager")
        self.window.set_border_width(0)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=0)
        box2.set_border_width(20)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        # Title
        titletext = "Updates available!"
        titlelabel = Gtk.Label(label=f"<b><span size='large'>{titletext}</span></b>")
        titlelabel.set_use_markup(True)
        box2.pack_start(titlelabel, False, False, 0)
        self.tree_store = Gtk.TreeStore(str, bool)
        sw = Gtk.ScrolledWindow()
        sw.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.display(self.store()))
        sw.show()
        box2.pack_start(sw, True, True, 10)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, False, 0)
        box2.show()
        # Add button
        box2.pack_start(self.create_bbox(), True, True, 5)
        self.window.show_all()

    def store(self):
        self.tree_store.clear()
        if checkforupdate():
            for line in pkgupdatelist():
                self.tree_store.append(None, (line, True))
            if "Software Update Available" not in updateToInstall:
                updateToInstall.extend(["Software Update Available"])
        return self.tree_store

    def display(self, model):
        self.view = Gtk.TreeView(model=model)
        self.renderer = Gtk.CellRendererText()
        self.renderer1 = Gtk.CellRendererToggle()
        self.renderer1.set_property('activatable', True)
        self.renderer1.connect('toggled', self.col1_toggled_cb, model)
        self.column0 = Gtk.TreeViewColumn("Name", self.renderer, text=0)
        self.column1 = Gtk.TreeViewColumn("Complete", self.renderer1)
        self.column1.add_attribute(self.renderer1, "active", 1)
        self.view.append_column(self.column1)
        self.view.append_column(self.column0)
        self.view.set_headers_visible(False)
        return self.view

    def col1_toggled_cb(self, cell, path, model):
        model[path][1] = not model[path][1]
        if ":" in path:
            if model[path][1] is False:
                lockPkg.extend([model[path][0]])
            else:
                lockPkg.remove(model[path][0])
        else:
            if model[path][1] is False:
                updateToInstall.remove(model[path][0].partition(':')[0])
            else:
                updateToInstall.extend([model[path][0].partition(':')[0]])
        return


class TrayIcon:
    def close_application(self, widget):
        quit()

    def __init__(self):
        # Statue Tray Code
        self.statusIcon = Gtk.StatusIcon()
        self.statusIcon.set_tooltip_text('Update Available')
        self.menu = Gtk.Menu()
        self.menu.show_all()
        self.statusIcon.connect("activate", self.leftclick)
        self.statusIcon.connect('popup-menu', self.icon_clicked)
        self.statusIcon.set_visible(False)

        self.statusIcon.set_from_icon_name('system-software-update')

    def nm_menu(self):
        # right click menue
        self.menu = Gtk.Menu()
        open_update = Gtk.MenuItem("Open Update")
        open_update.connect("activate", self.leftclick)
        close_item = Gtk.MenuItem("Close")
        close_item.connect("activate", self.close_application)
        self.menu.append(open_update)
        self.menu.append(close_item)
        self.menu.show_all()
        return self.menu

    def leftclick(self, status_icon):
        global iconStopRefrech
        iconStopRefrech = True
        UpdateWindow()
        self.hide_icon()

    def icon_clicked(self, status_icon, button, time):
        position = Gtk.StatusIcon.position_menu
        # def position(menu, icon):
        #     return (Gtk.StatusIcon.position_menu(menu, icon))
        self.nm_menu().popup(None, None, position, status_icon, button, time)

    def hide_icon(self):
        self.statusIcon.set_visible(False)

    def updatetray(self):
        if checkforupdate() is True:
            self.statusIcon.set_visible(True)
            msg = "system and software upgrade are now available"
            notify = f'notify-send "Update available" "{msg}"'
            notify += ' -i stock_view-details -t 10000'
            Popen(notify, shell=True, close_fds=True)
        else:
            self.statusIcon.set_visible(False)
        return

    def treadingupdate(self):
        thr = threading.Thread(target=self.check)
        thr.setDaemon(True)
        thr.start()

    def check(self):
        while True:
            sleep(1200)
            global iconStopRefrech
            if iconStopRefrech is False:
                runcheckupdate()
                GLib.idle_add(self.updatetray)
        return True


class InstallUpdate:

    def close_application(self, widget):
        Gtk.main_quit()

    def __init__(self, installupdate):
        self.win = Gtk.Window()
        self.win.connect("delete-event", Gtk.main_quit)
        self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title("installing Update")
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.pbar = Gtk.ProgressBar()
        self.pbar.set_show_text(True)
        self.pbar.set_fraction(0.0)
        # self.pbar.set_size_request(-1, 20)
        box2.pack_start(self.pbar, False, False, 0)
        self.win.show_all()
        self.thr = threading.Thread(target=self.read_output,
                                    args=(self.pbar, installupdate))
        self.thr.setDaemon(True)
        self.thr.start()

    def update_progress(self, progress, fraction, text):
        progress.set_fraction(fraction)
        progress.set_text(text)

    def read_output(self, progress, installupdate):
        howmany = len(installupdate)
        fraction = 1.0 / int(howmany)
        txt = "Fetching packages updates"
        GLib.idle_add(self.update_progress, progress, 0.1, txt)
        print(txt)
        sleep(1)
        fpu = fetchpkgupdate()
        while 1:
            line = fpu.readline()
            if not line:
                break
            text = line.rstrip()
            GLib.idle_add(self.update_progress, progress, 0.2, text)
        new_val = progress.get_fraction() + (fraction / 2)
        txt = "Packages updates downloaded"
        GLib.idle_add(self.update_progress, progress, new_val, text)
        sleep(1)
        txt = "Installing packages updates"
        GLib.idle_add(self.update_progress, progress, new_val, txt)
        sleep(1)
        ipu = installpkgupdate()
        while 1:
            line = ipu.readline()
            if not line:
                break
            text = line.rstrip()
            GLib.idle_add(self.update_progress, progress, new_val, text)
        new_val = progress.get_fraction() + (fraction / 2)
        txt = "Packages updates installed"
        GLib.idle_add(self.update_progress, progress, new_val, txt)
        sleep(1)
        # to adding sanity check here.
        self.win.hide()
        global iconStopRefrech
        iconStopRefrech = False
        # RestartSystem()
        GObject.idle_add(self.stop_tread)

    def stop_tread(self):
        self.thr.join()
        RestartSystem()


rtxt = """The computer needs to restart to use the updated software."""


class RestartSystem():

    def on_reboot(self, widget):
        Popen('shutdown -r now', shell=True)
        Gtk.main_quit()

    def on_close(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.hide()

    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_position(Gtk.WindowPosition.CENTER)
        # self.window.set_border_width(8)
        self.window.connect("destroy", self.on_close)
        self.window.set_title("Update Completed")
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(vBox)
        vBox.show()
        label = Gtk.Label(label=rtxt)
        vBox.set_border_width(5)
        vBox.pack_start(label, False, False, 5)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        # hBox.set_border_width(5)
        vBox.pack_start(hBox, False, True, 5)
        hBox.show()
        restart = Gtk.Button("Restart Now")
        restart.connect("clicked", self.on_reboot)
        continuebtn = Gtk.Button("Restart Later")
        continuebtn.connect("clicked", self.on_close)
        hBox.pack_end(continuebtn, False, False, 5)
        hBox.pack_end(restart, False, False, 5)
        self.window.show_all()


class noUpdateAvailable(object):

    def on_close(self, widget):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WindowPosition.CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title("No Update Available")
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label="No update available, this system is up to date.")
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button("Close")
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        window.show_all()


class startCheckUpdate:

    def __init__(self):
        runcheckupdate()
        if checkforupdate() is True:
            UpdateWindow()
        else:
            noUpdateAvailable()


arg = sys.argv
UsageMSG = """
Usage for %s:

Available Commands:

check-now       - Lock for update now

""" % arg[0]

global close_session

if len(arg) > 2:
    print(UsageMSG)
    sys.exit(0)
elif len(arg) == 1:
    if socket.gethostname() != 'ghostbsd':
        close_session = False
        TrayIcon().treadingupdate()
        Gtk.main()
    else:
        exit()
elif len(arg) == 2 and arg[1] == "check-now":
    close_session = True
    startCheckUpdate()
    Gtk.main()
else:
    print(UsageMSG)
    sys.exit(0)
